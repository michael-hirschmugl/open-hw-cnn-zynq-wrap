<: if { [string match -nocase "[get_property RUNTIME_PARAM.SELECTEDSIMMODEL]" "qemu"] } { :>
<: source_ipfile xit/svcosim_sim_wrapper.xit :>
<: } else { :>
<: set ComponentName [getComponentNameString] :>
<: setFileName ${ComponentName} :>
<: setFileExtension .v :>
<: setOutputDirectory sim/ :> 
<: set m_axi_gp0 [get_property PARAM_VALUE.PCW_USE_M_AXI_GP0] :>
<: set m_axi_gp1 [get_property PARAM_VALUE.PCW_USE_M_AXI_GP1] :>
<: set s_axi_gp0 [get_property PARAM_VALUE.PCW_USE_S_AXI_GP0] :>
<: set s_axi_gp1 [get_property PARAM_VALUE.PCW_USE_S_AXI_GP1] :>
<: set s_axi_hp0 [get_property PARAM_VALUE.PCW_USE_S_AXI_HP0] :>
<: set s_axi_hp1 [get_property PARAM_VALUE.PCW_USE_S_AXI_HP1] :>
<: set s_axi_hp2 [get_property PARAM_VALUE.PCW_USE_S_AXI_HP2] :>
<: set s_axi_hp3 [get_property PARAM_VALUE.PCW_USE_S_AXI_HP3] :>
<: set s_axi_acp [get_property PARAM_VALUE.PCW_USE_S_AXI_ACP] :>
<: set fclk0 [get_property PARAM_VALUE.PCW_EN_CLK0_PORT] :>
<: set fclk1 [get_property PARAM_VALUE.PCW_EN_CLK1_PORT] :>
<: set fclk2 [get_property PARAM_VALUE.PCW_EN_CLK2_PORT] :>
<: set fclk3 [get_property PARAM_VALUE.PCW_EN_CLK3_PORT] :>
<: set rst0 [get_property PARAM_VALUE.PCW_EN_RST0_PORT] :>
<: set rst1 [get_property PARAM_VALUE.PCW_EN_RST1_PORT] :>
<: set rst2 [get_property PARAM_VALUE.PCW_EN_RST2_PORT] :>
<: set rst3 [get_property PARAM_VALUE.PCW_EN_RST3_PORT] :>
<: set hp0_data_width [get_property PARAM_VALUE.PCW_S_AXI_HP0_DATA_WIDTH] :>
<: set hp1_data_width [get_property PARAM_VALUE.PCW_S_AXI_HP1_DATA_WIDTH] :>
<: set hp2_data_width [get_property PARAM_VALUE.PCW_S_AXI_HP2_DATA_WIDTH] :>
<: set hp3_data_width [get_property PARAM_VALUE.PCW_S_AXI_HP3_DATA_WIDTH] :>
<: set high_ocm_en [get_property PARAM_VALUE.PCW_USE_HIGH_OCM] :>
<: set fclk0_freq [expr [get_property PARAM_VALUE.PCW_CLK0_FREQ]/1000000.0] :>
<: set fclk1_freq [expr [get_property PARAM_VALUE.PCW_CLK1_FREQ]/1000000.0] :>
<: set fclk2_freq [expr [get_property PARAM_VALUE.PCW_CLK2_FREQ]/1000000.0] :>
<: set fclk3_freq [expr [get_property PARAM_VALUE.PCW_CLK3_FREQ]/1000000.0] :>
<: set irqf2p_en [get_property PARAM_VALUE.PCW_IRQ_F2P_INTR] :>
<: set m_axi_gp0_enable_static_remap [get_property PARAM_VALUE.PCW_M_AXI_GP0_ENABLE_STATIC_REMAP] :>
<: set m_axi_gp1_enable_static_remap [get_property PARAM_VALUE.PCW_M_AXI_GP1_ENABLE_STATIC_REMAP] :>
<: set m_axi_gp0_thread_id_width [get_property PARAM_VALUE.PCW_M_AXI_GP0_THREAD_ID_WIDTH] :>
<: set m_axi_gp1_thread_id_width [get_property PARAM_VALUE.PCW_M_AXI_GP1_THREAD_ID_WIDTH] :>


// (c) Copyright 1995-2013 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
// 
// DO NOT MODIFY THIS FILE.


// IP VLNV: xilinx.com:ip:processing_system7_vip:1.0
// IP Revision: 1

`timescale 1ns/1ps

module <=: ComponentName :> (
<: foreach ipx_port [::xit::get_all_ports] { :>
<: if { [get_property enablement_value $ipx_port] } { :>
<: set name [get_property name $ipx_port] :>
<: if { [get_property name $ipx_port] == "PS_PORB" } { :>
<=: name :> 
<: } else { :>
<=: name :>, 
<: } :>
<: } :>
<: } :>
);
<: foreach ipx_port [::xit::get_all_ports] { :>
<: if { [get_property enablement_value $ipx_port] } { :>
<: set name [get_property name $ipx_port] :>
<: set dir [get_property direction $ipx_port] :>
<: set is_vector [get_property is_vector $ipx_port] :>
<: set size_left [get_property size_left $ipx_port] :>
<: set size_right [get_property size_right $ipx_port] :>
<: if { [string match -nocase "in*" $dir] } { :>
<: if { $is_vector } { :>
input [<=: size_left :> : <=: size_right :>] <=: name :>;
<: } else { :>
input <=: name :>;
<: } :>
<: } elseif { [string match -nocase "out*" $dir] } { :>
<: if { $is_vector } { :>
output [<=: size_left :> : <=: size_right :>] <=: name :>;
<: } else { :>
output <=: name :>;
<: } :>
<: } :>
<: } :>
<: } :>

  processing_system7_vip_v1_0_13 #(
    .C_USE_M_AXI_GP0(<=: m_axi_gp0 :>),
    .C_USE_M_AXI_GP1(<=: m_axi_gp1 :>),
    .C_USE_S_AXI_ACP(<=: s_axi_acp :>),
    .C_USE_S_AXI_GP0(<=: s_axi_gp0 :>),
    .C_USE_S_AXI_GP1(<=: s_axi_gp1 :>),
    .C_USE_S_AXI_HP0(<=: s_axi_hp0 :>),
    .C_USE_S_AXI_HP1(<=: s_axi_hp1 :>),
    .C_USE_S_AXI_HP2(<=: s_axi_hp2 :>),
    .C_USE_S_AXI_HP3(<=: s_axi_hp3 :>),
    .C_S_AXI_HP0_DATA_WIDTH(<=: hp0_data_width :>),
    .C_S_AXI_HP1_DATA_WIDTH(<=: hp1_data_width :>),
    .C_S_AXI_HP2_DATA_WIDTH(<=: hp2_data_width :>),
    .C_S_AXI_HP3_DATA_WIDTH(<=: hp3_data_width :>),
    .C_HIGH_OCM_EN(<=: high_ocm_en :>),
    .C_FCLK_CLK0_FREQ(<=: fclk0_freq :>),
    .C_FCLK_CLK1_FREQ(<=: fclk1_freq :>),
    .C_FCLK_CLK2_FREQ(<=: fclk2_freq :>),
    .C_FCLK_CLK3_FREQ(<=: fclk3_freq :>),
	.C_M_AXI_GP0_ENABLE_STATIC_REMAP(<=: m_axi_gp0_enable_static_remap :>),
	.C_M_AXI_GP1_ENABLE_STATIC_REMAP(<=: m_axi_gp1_enable_static_remap :>),
	.C_M_AXI_GP0_THREAD_ID_WIDTH (<=: m_axi_gp0_thread_id_width :>), 
	.C_M_AXI_GP1_THREAD_ID_WIDTH (<=: m_axi_gp1_thread_id_width :>)
  ) inst (
<: if { $m_axi_gp0 == 1} {   :>
    .M_AXI_GP0_ARVALID(M_AXI_GP0_ARVALID),
    .M_AXI_GP0_AWVALID(M_AXI_GP0_AWVALID),
    .M_AXI_GP0_BREADY(M_AXI_GP0_BREADY),
    .M_AXI_GP0_RREADY(M_AXI_GP0_RREADY),
    .M_AXI_GP0_WLAST(M_AXI_GP0_WLAST),
    .M_AXI_GP0_WVALID(M_AXI_GP0_WVALID),
    .M_AXI_GP0_ARID(M_AXI_GP0_ARID),
    .M_AXI_GP0_AWID(M_AXI_GP0_AWID),
    .M_AXI_GP0_WID(M_AXI_GP0_WID),
    .M_AXI_GP0_ARBURST(M_AXI_GP0_ARBURST),
    .M_AXI_GP0_ARLOCK(M_AXI_GP0_ARLOCK),
    .M_AXI_GP0_ARSIZE(M_AXI_GP0_ARSIZE),
    .M_AXI_GP0_AWBURST(M_AXI_GP0_AWBURST),
    .M_AXI_GP0_AWLOCK(M_AXI_GP0_AWLOCK),
    .M_AXI_GP0_AWSIZE(M_AXI_GP0_AWSIZE),
    .M_AXI_GP0_ARPROT(M_AXI_GP0_ARPROT),
    .M_AXI_GP0_AWPROT(M_AXI_GP0_AWPROT),
    .M_AXI_GP0_ARADDR(M_AXI_GP0_ARADDR),
    .M_AXI_GP0_AWADDR(M_AXI_GP0_AWADDR),
    .M_AXI_GP0_WDATA(M_AXI_GP0_WDATA),
    .M_AXI_GP0_ARCACHE(M_AXI_GP0_ARCACHE),
    .M_AXI_GP0_ARLEN(M_AXI_GP0_ARLEN),
    .M_AXI_GP0_ARQOS(M_AXI_GP0_ARQOS),
    .M_AXI_GP0_AWCACHE(M_AXI_GP0_AWCACHE),
    .M_AXI_GP0_AWLEN(M_AXI_GP0_AWLEN),
    .M_AXI_GP0_AWQOS(M_AXI_GP0_AWQOS),
    .M_AXI_GP0_WSTRB(M_AXI_GP0_WSTRB),
    .M_AXI_GP0_ACLK(M_AXI_GP0_ACLK),
    .M_AXI_GP0_ARREADY(M_AXI_GP0_ARREADY),
    .M_AXI_GP0_AWREADY(M_AXI_GP0_AWREADY),
    .M_AXI_GP0_BVALID(M_AXI_GP0_BVALID),
    .M_AXI_GP0_RLAST(M_AXI_GP0_RLAST),
    .M_AXI_GP0_RVALID(M_AXI_GP0_RVALID),
    .M_AXI_GP0_WREADY(M_AXI_GP0_WREADY),
    .M_AXI_GP0_BID(M_AXI_GP0_BID),
    .M_AXI_GP0_RID(M_AXI_GP0_RID),
    .M_AXI_GP0_BRESP(M_AXI_GP0_BRESP),
    .M_AXI_GP0_RRESP(M_AXI_GP0_RRESP),
    .M_AXI_GP0_RDATA(M_AXI_GP0_RDATA),
<: }  :>
<: if { $m_axi_gp0 == 0} {   :>
    .M_AXI_GP0_ARVALID(),
    .M_AXI_GP0_AWVALID(),
    .M_AXI_GP0_BREADY(),
    .M_AXI_GP0_RREADY(),
    .M_AXI_GP0_WLAST(),
    .M_AXI_GP0_WVALID(),
    .M_AXI_GP0_ARID(),
    .M_AXI_GP0_AWID(),
    .M_AXI_GP0_WID(),
    .M_AXI_GP0_ARBURST(),
    .M_AXI_GP0_ARLOCK(),
    .M_AXI_GP0_ARSIZE(),
    .M_AXI_GP0_AWBURST(),
    .M_AXI_GP0_AWLOCK(),
    .M_AXI_GP0_AWSIZE(),
    .M_AXI_GP0_ARPROT(),
    .M_AXI_GP0_AWPROT(),
    .M_AXI_GP0_ARADDR(),
    .M_AXI_GP0_AWADDR(),
    .M_AXI_GP0_WDATA(),
    .M_AXI_GP0_ARCACHE(),
    .M_AXI_GP0_ARLEN(),
    .M_AXI_GP0_ARQOS(),
    .M_AXI_GP0_AWCACHE(),
    .M_AXI_GP0_AWLEN(),
    .M_AXI_GP0_AWQOS(),
    .M_AXI_GP0_WSTRB(),
    .M_AXI_GP0_ACLK(1'B0),
    .M_AXI_GP0_ARREADY(1'B0),
    .M_AXI_GP0_AWREADY(1'B0),
    .M_AXI_GP0_BVALID(1'B0),
    .M_AXI_GP0_RLAST(1'B0),
    .M_AXI_GP0_RVALID(1'B0),
    .M_AXI_GP0_WREADY(1'B0),
    .M_AXI_GP0_BID(12'B0),
    .M_AXI_GP0_RID(12'B0),
    .M_AXI_GP0_BRESP(2'B0),
    .M_AXI_GP0_RRESP(2'B0),
    .M_AXI_GP0_RDATA(32'B0),
<: }  :>
<: if { $m_axi_gp1 == 1} {   :>
    .M_AXI_GP1_ARVALID(M_AXI_GP1_ARVALID),
    .M_AXI_GP1_AWVALID(M_AXI_GP1_AWVALID),
    .M_AXI_GP1_BREADY(M_AXI_GP1_BREADY),
    .M_AXI_GP1_RREADY(M_AXI_GP1_RREADY),
    .M_AXI_GP1_WLAST(M_AXI_GP1_WLAST),
    .M_AXI_GP1_WVALID(M_AXI_GP1_WVALID),
    .M_AXI_GP1_ARID(M_AXI_GP1_ARID),
    .M_AXI_GP1_AWID(M_AXI_GP1_AWID),
    .M_AXI_GP1_WID(M_AXI_GP1_WID),
    .M_AXI_GP1_ARBURST(M_AXI_GP1_ARBURST),
    .M_AXI_GP1_ARLOCK(M_AXI_GP1_ARLOCK),
    .M_AXI_GP1_ARSIZE(M_AXI_GP1_ARSIZE),
    .M_AXI_GP1_AWBURST(M_AXI_GP1_AWBURST),
    .M_AXI_GP1_AWLOCK(M_AXI_GP1_AWLOCK),
    .M_AXI_GP1_AWSIZE(M_AXI_GP1_AWSIZE),
    .M_AXI_GP1_ARPROT(M_AXI_GP1_ARPROT),
    .M_AXI_GP1_AWPROT(M_AXI_GP1_AWPROT),
    .M_AXI_GP1_ARADDR(M_AXI_GP1_ARADDR),
    .M_AXI_GP1_AWADDR(M_AXI_GP1_AWADDR),
    .M_AXI_GP1_WDATA(M_AXI_GP1_WDATA),
    .M_AXI_GP1_ARCACHE(M_AXI_GP1_ARCACHE),
    .M_AXI_GP1_ARLEN(M_AXI_GP1_ARLEN),
    .M_AXI_GP1_ARQOS(M_AXI_GP1_ARQOS),
    .M_AXI_GP1_AWCACHE(M_AXI_GP1_AWCACHE),
    .M_AXI_GP1_AWLEN(M_AXI_GP1_AWLEN),
    .M_AXI_GP1_AWQOS(M_AXI_GP1_AWQOS),
    .M_AXI_GP1_WSTRB(M_AXI_GP1_WSTRB),
    .M_AXI_GP1_ACLK(M_AXI_GP1_ACLK),
    .M_AXI_GP1_ARREADY(M_AXI_GP1_ARREADY),
    .M_AXI_GP1_AWREADY(M_AXI_GP1_AWREADY),
    .M_AXI_GP1_BVALID(M_AXI_GP1_BVALID),
    .M_AXI_GP1_RLAST(M_AXI_GP1_RLAST),
    .M_AXI_GP1_RVALID(M_AXI_GP1_RVALID),
    .M_AXI_GP1_WREADY(M_AXI_GP1_WREADY),
    .M_AXI_GP1_BID(M_AXI_GP1_BID),
    .M_AXI_GP1_RID(M_AXI_GP1_RID),
    .M_AXI_GP1_BRESP(M_AXI_GP1_BRESP),
    .M_AXI_GP1_RRESP(M_AXI_GP1_RRESP),
    .M_AXI_GP1_RDATA(M_AXI_GP1_RDATA),
<: }  :>
<: if { $m_axi_gp1 == 0} {   :>
    .M_AXI_GP1_ARVALID(),
    .M_AXI_GP1_AWVALID(),
    .M_AXI_GP1_BREADY(),
    .M_AXI_GP1_RREADY(),
    .M_AXI_GP1_WLAST(),
    .M_AXI_GP1_WVALID(),
    .M_AXI_GP1_ARID(),
    .M_AXI_GP1_AWID(),
    .M_AXI_GP1_WID(),
    .M_AXI_GP1_ARBURST(),
    .M_AXI_GP1_ARLOCK(),
    .M_AXI_GP1_ARSIZE(),
    .M_AXI_GP1_AWBURST(),
    .M_AXI_GP1_AWLOCK(),
    .M_AXI_GP1_AWSIZE(),
    .M_AXI_GP1_ARPROT(),
    .M_AXI_GP1_AWPROT(),
    .M_AXI_GP1_ARADDR(),
    .M_AXI_GP1_AWADDR(),
    .M_AXI_GP1_WDATA(),
    .M_AXI_GP1_ARCACHE(),
    .M_AXI_GP1_ARLEN(),
    .M_AXI_GP1_ARQOS(),
    .M_AXI_GP1_AWCACHE(),
    .M_AXI_GP1_AWLEN(),
    .M_AXI_GP1_AWQOS(),
    .M_AXI_GP1_WSTRB(),
    .M_AXI_GP1_ACLK(1'B0),
    .M_AXI_GP1_ARREADY(1'B0),
    .M_AXI_GP1_AWREADY(1'B0),
    .M_AXI_GP1_BVALID(1'B0),
    .M_AXI_GP1_RLAST(1'B0),
    .M_AXI_GP1_RVALID(1'B0),
    .M_AXI_GP1_WREADY(1'B0),
    .M_AXI_GP1_BID(12'B0),
    .M_AXI_GP1_RID(12'B0),
    .M_AXI_GP1_BRESP(2'B0),
    .M_AXI_GP1_RRESP(2'B0),
    .M_AXI_GP1_RDATA(32'B0),
<: }  :>
<: if { $s_axi_gp0 == 1} {   :>
    .S_AXI_GP0_ARREADY(S_AXI_GP0_ARREADY),
    .S_AXI_GP0_AWREADY(S_AXI_GP0_AWREADY),
    .S_AXI_GP0_BVALID(S_AXI_GP0_BVALID),
    .S_AXI_GP0_RLAST(S_AXI_GP0_RLAST),
    .S_AXI_GP0_RVALID(S_AXI_GP0_RVALID),
    .S_AXI_GP0_WREADY(S_AXI_GP0_WREADY),
    .S_AXI_GP0_BRESP(S_AXI_GP0_BRESP),
    .S_AXI_GP0_RRESP(S_AXI_GP0_RRESP),
    .S_AXI_GP0_RDATA(S_AXI_GP0_RDATA),
    .S_AXI_GP0_BID(S_AXI_GP0_BID),
    .S_AXI_GP0_RID(S_AXI_GP0_RID),
    .S_AXI_GP0_ACLK(S_AXI_GP0_ACLK),
    .S_AXI_GP0_ARVALID(S_AXI_GP0_ARVALID),
    .S_AXI_GP0_AWVALID(S_AXI_GP0_AWVALID),
    .S_AXI_GP0_BREADY(S_AXI_GP0_BREADY),
    .S_AXI_GP0_RREADY(S_AXI_GP0_RREADY),
    .S_AXI_GP0_WLAST(S_AXI_GP0_WLAST),
    .S_AXI_GP0_WVALID(S_AXI_GP0_WVALID),
    .S_AXI_GP0_ARBURST(S_AXI_GP0_ARBURST),
    .S_AXI_GP0_ARLOCK(S_AXI_GP0_ARLOCK),
    .S_AXI_GP0_ARSIZE(S_AXI_GP0_ARSIZE),
    .S_AXI_GP0_AWBURST(S_AXI_GP0_AWBURST),
    .S_AXI_GP0_AWLOCK(S_AXI_GP0_AWLOCK),
    .S_AXI_GP0_AWSIZE(S_AXI_GP0_AWSIZE),
    .S_AXI_GP0_ARPROT(S_AXI_GP0_ARPROT),
    .S_AXI_GP0_AWPROT(S_AXI_GP0_AWPROT),
    .S_AXI_GP0_ARADDR(S_AXI_GP0_ARADDR),
    .S_AXI_GP0_AWADDR(S_AXI_GP0_AWADDR),
    .S_AXI_GP0_WDATA(S_AXI_GP0_WDATA),
    .S_AXI_GP0_ARCACHE(S_AXI_GP0_ARCACHE),
    .S_AXI_GP0_ARLEN(S_AXI_GP0_ARLEN),
    .S_AXI_GP0_ARQOS(S_AXI_GP0_ARQOS),
    .S_AXI_GP0_AWCACHE(S_AXI_GP0_AWCACHE),
    .S_AXI_GP0_AWLEN(S_AXI_GP0_AWLEN),
    .S_AXI_GP0_AWQOS(S_AXI_GP0_AWQOS),
    .S_AXI_GP0_WSTRB(S_AXI_GP0_WSTRB),
    .S_AXI_GP0_ARID(S_AXI_GP0_ARID),
    .S_AXI_GP0_AWID(S_AXI_GP0_AWID),
    .S_AXI_GP0_WID(S_AXI_GP0_WID),
<: }  :>
<: if { $s_axi_gp0 == 0} {   :>
    .S_AXI_GP0_ARREADY(),
    .S_AXI_GP0_AWREADY(),
    .S_AXI_GP0_BVALID(),
    .S_AXI_GP0_RLAST(),
    .S_AXI_GP0_RVALID(),
    .S_AXI_GP0_WREADY(),
    .S_AXI_GP0_BRESP(),
    .S_AXI_GP0_RRESP(),
    .S_AXI_GP0_RDATA(),
    .S_AXI_GP0_BID(),
    .S_AXI_GP0_RID(),
    .S_AXI_GP0_ACLK(1'B0),
    .S_AXI_GP0_ARVALID(1'B0),
    .S_AXI_GP0_AWVALID(1'B0),
    .S_AXI_GP0_BREADY(1'B0),
    .S_AXI_GP0_RREADY(1'B0),
    .S_AXI_GP0_WLAST(1'B0),
    .S_AXI_GP0_WVALID(1'B0),
    .S_AXI_GP0_ARBURST(2'B0),
    .S_AXI_GP0_ARLOCK(2'B0),
    .S_AXI_GP0_ARSIZE(3'B0),
    .S_AXI_GP0_AWBURST(2'B0),
    .S_AXI_GP0_AWLOCK(2'B0),
    .S_AXI_GP0_AWSIZE(3'B0),
    .S_AXI_GP0_ARPROT(3'B0),
    .S_AXI_GP0_AWPROT(3'B0),
    .S_AXI_GP0_ARADDR(32'B0),
    .S_AXI_GP0_AWADDR(32'B0),
    .S_AXI_GP0_WDATA(32'B0),
    .S_AXI_GP0_ARCACHE(4'B0),
    .S_AXI_GP0_ARLEN(4'B0),
    .S_AXI_GP0_ARQOS(4'B0),
    .S_AXI_GP0_AWCACHE(4'B0),
    .S_AXI_GP0_AWLEN(4'B0),
    .S_AXI_GP0_AWQOS(4'B0),
    .S_AXI_GP0_WSTRB(4'B0),
    .S_AXI_GP0_ARID(6'B0),
    .S_AXI_GP0_AWID(6'B0),
    .S_AXI_GP0_WID(6'B0),
<: }  :>
<: if { $s_axi_gp1 == 1} {   :>
    .S_AXI_GP1_ARREADY(S_AXI_GP1_ARREADY),
    .S_AXI_GP1_AWREADY(S_AXI_GP1_AWREADY),
    .S_AXI_GP1_BVALID(S_AXI_GP1_BVALID),
    .S_AXI_GP1_RLAST(S_AXI_GP1_RLAST),
    .S_AXI_GP1_RVALID(S_AXI_GP1_RVALID),
    .S_AXI_GP1_WREADY(S_AXI_GP1_WREADY),
    .S_AXI_GP1_BRESP(S_AXI_GP1_BRESP),
    .S_AXI_GP1_RRESP(S_AXI_GP1_RRESP),
    .S_AXI_GP1_RDATA(S_AXI_GP1_RDATA),
    .S_AXI_GP1_BID(S_AXI_GP1_BID),
    .S_AXI_GP1_RID(S_AXI_GP1_RID),
    .S_AXI_GP1_ACLK(S_AXI_GP1_ACLK),
    .S_AXI_GP1_ARVALID(S_AXI_GP1_ARVALID),
    .S_AXI_GP1_AWVALID(S_AXI_GP1_AWVALID),
    .S_AXI_GP1_BREADY(S_AXI_GP1_BREADY),
    .S_AXI_GP1_RREADY(S_AXI_GP1_RREADY),
    .S_AXI_GP1_WLAST(S_AXI_GP1_WLAST),
    .S_AXI_GP1_WVALID(S_AXI_GP1_WVALID),
    .S_AXI_GP1_ARBURST(S_AXI_GP1_ARBURST),
    .S_AXI_GP1_ARLOCK(S_AXI_GP1_ARLOCK),
    .S_AXI_GP1_ARSIZE(S_AXI_GP1_ARSIZE),
    .S_AXI_GP1_AWBURST(S_AXI_GP1_AWBURST),
    .S_AXI_GP1_AWLOCK(S_AXI_GP1_AWLOCK),
    .S_AXI_GP1_AWSIZE(S_AXI_GP1_AWSIZE),
    .S_AXI_GP1_ARPROT(S_AXI_GP1_ARPROT),
    .S_AXI_GP1_AWPROT(S_AXI_GP1_AWPROT),
    .S_AXI_GP1_ARADDR(S_AXI_GP1_ARADDR),
    .S_AXI_GP1_AWADDR(S_AXI_GP1_AWADDR),
    .S_AXI_GP1_WDATA(S_AXI_GP1_WDATA),
    .S_AXI_GP1_ARCACHE(S_AXI_GP1_ARCACHE),
    .S_AXI_GP1_ARLEN(S_AXI_GP1_ARLEN),
    .S_AXI_GP1_ARQOS(S_AXI_GP1_ARQOS),
    .S_AXI_GP1_AWCACHE(S_AXI_GP1_AWCACHE),
    .S_AXI_GP1_AWLEN(S_AXI_GP1_AWLEN),
    .S_AXI_GP1_AWQOS(S_AXI_GP1_AWQOS),
    .S_AXI_GP1_WSTRB(S_AXI_GP1_WSTRB),
    .S_AXI_GP1_ARID(S_AXI_GP1_ARID),
    .S_AXI_GP1_AWID(S_AXI_GP1_AWID),
    .S_AXI_GP1_WID(S_AXI_GP1_WID),
<: }  :>
<: if { $s_axi_gp1 == 0} {   :>
    .S_AXI_GP1_ARREADY(),
    .S_AXI_GP1_AWREADY(),
    .S_AXI_GP1_BVALID(),
    .S_AXI_GP1_RLAST(),
    .S_AXI_GP1_RVALID(),
    .S_AXI_GP1_WREADY(),
    .S_AXI_GP1_BRESP(),
    .S_AXI_GP1_RRESP(),
    .S_AXI_GP1_RDATA(),
    .S_AXI_GP1_BID(),
    .S_AXI_GP1_RID(),
    .S_AXI_GP1_ACLK(1'B0),
    .S_AXI_GP1_ARVALID(1'B0),
    .S_AXI_GP1_AWVALID(1'B0),
    .S_AXI_GP1_BREADY(1'B0),
    .S_AXI_GP1_RREADY(1'B0),
    .S_AXI_GP1_WLAST(1'B0),
    .S_AXI_GP1_WVALID(1'B0),
    .S_AXI_GP1_ARBURST(2'B0),
    .S_AXI_GP1_ARLOCK(2'B0),
    .S_AXI_GP1_ARSIZE(3'B0),
    .S_AXI_GP1_AWBURST(2'B0),
    .S_AXI_GP1_AWLOCK(2'B0),
    .S_AXI_GP1_AWSIZE(3'B0),
    .S_AXI_GP1_ARPROT(3'B0),
    .S_AXI_GP1_AWPROT(3'B0),
    .S_AXI_GP1_ARADDR(32'B0),
    .S_AXI_GP1_AWADDR(32'B0),
    .S_AXI_GP1_WDATA(32'B0),
    .S_AXI_GP1_ARCACHE(4'B0),
    .S_AXI_GP1_ARLEN(4'B0),
    .S_AXI_GP1_ARQOS(4'B0),
    .S_AXI_GP1_AWCACHE(4'B0),
    .S_AXI_GP1_AWLEN(4'B0),
    .S_AXI_GP1_AWQOS(4'B0),
    .S_AXI_GP1_WSTRB(4'B0),
    .S_AXI_GP1_ARID(6'B0),
    .S_AXI_GP1_AWID(6'B0),
    .S_AXI_GP1_WID(6'B0),
<: }  :>
<: if { $s_axi_acp == 1} {   :>
    .S_AXI_ACP_ARREADY(S_AXI_ACP_ARREADY),
    .S_AXI_ACP_AWREADY(S_AXI_ACP_AWREADY),
    .S_AXI_ACP_BVALID(S_AXI_ACP_BVALID),
    .S_AXI_ACP_RLAST(S_AXI_ACP_RLAST),
    .S_AXI_ACP_RVALID(S_AXI_ACP_RVALID),
    .S_AXI_ACP_WREADY(S_AXI_ACP_WREADY),
    .S_AXI_ACP_BRESP(S_AXI_ACP_BRESP),
    .S_AXI_ACP_RRESP(S_AXI_ACP_RRESP),
    .S_AXI_ACP_BID(S_AXI_ACP_BID),
    .S_AXI_ACP_RID(S_AXI_ACP_RID),
    .S_AXI_ACP_RDATA(S_AXI_ACP_RDATA),
    .S_AXI_ACP_ACLK(S_AXI_ACP_ACLK),
    .S_AXI_ACP_ARVALID(S_AXI_ACP_ARVALID),
    .S_AXI_ACP_AWVALID(S_AXI_ACP_AWVALID),
    .S_AXI_ACP_BREADY(S_AXI_ACP_BREADY),
    .S_AXI_ACP_RREADY(S_AXI_ACP_RREADY),
    .S_AXI_ACP_WLAST(S_AXI_ACP_WLAST),
    .S_AXI_ACP_WVALID(S_AXI_ACP_WVALID),
    .S_AXI_ACP_ARID(S_AXI_ACP_ARID),
    .S_AXI_ACP_ARPROT(S_AXI_ACP_ARPROT),
    .S_AXI_ACP_AWID(S_AXI_ACP_AWID),
    .S_AXI_ACP_AWPROT(S_AXI_ACP_AWPROT),
    .S_AXI_ACP_WID(S_AXI_ACP_WID),
    .S_AXI_ACP_ARADDR(S_AXI_ACP_ARADDR),
    .S_AXI_ACP_AWADDR(S_AXI_ACP_AWADDR),
    .S_AXI_ACP_ARCACHE(S_AXI_ACP_ARCACHE),
    .S_AXI_ACP_ARLEN(S_AXI_ACP_ARLEN),
    .S_AXI_ACP_ARQOS(S_AXI_ACP_ARQOS),
    .S_AXI_ACP_AWCACHE(S_AXI_ACP_AWCACHE),
    .S_AXI_ACP_AWLEN(S_AXI_ACP_AWLEN),
    .S_AXI_ACP_AWQOS(S_AXI_ACP_AWQOS),
    .S_AXI_ACP_ARBURST(S_AXI_ACP_ARBURST),
    .S_AXI_ACP_ARLOCK(S_AXI_ACP_ARLOCK),
    .S_AXI_ACP_ARSIZE(S_AXI_ACP_ARSIZE),
    .S_AXI_ACP_AWBURST(S_AXI_ACP_AWBURST),
    .S_AXI_ACP_AWLOCK(S_AXI_ACP_AWLOCK),
    .S_AXI_ACP_AWSIZE(S_AXI_ACP_AWSIZE),
    .S_AXI_ACP_ARUSER(S_AXI_ACP_ARUSER),
    .S_AXI_ACP_AWUSER(S_AXI_ACP_AWUSER),
    .S_AXI_ACP_WDATA(S_AXI_ACP_WDATA),
    .S_AXI_ACP_WSTRB(S_AXI_ACP_WSTRB),
<: }  :>
<: if { $s_axi_acp == 0} {   :>
    .S_AXI_ACP_ARREADY(),
    .S_AXI_ACP_AWREADY(),
    .S_AXI_ACP_BVALID(),
    .S_AXI_ACP_RLAST(),
    .S_AXI_ACP_RVALID(),
    .S_AXI_ACP_WREADY(),
    .S_AXI_ACP_BRESP(),
    .S_AXI_ACP_RRESP(),
    .S_AXI_ACP_BID(),
    .S_AXI_ACP_RID(),
    .S_AXI_ACP_RDATA(),
    .S_AXI_ACP_ACLK(1'B0),
    .S_AXI_ACP_ARVALID(1'B0),
    .S_AXI_ACP_AWVALID(1'B0),
    .S_AXI_ACP_BREADY(1'B0),
    .S_AXI_ACP_RREADY(1'B0),
    .S_AXI_ACP_WLAST(1'B0),
    .S_AXI_ACP_WVALID(1'B0),
    .S_AXI_ACP_ARID(3'B0),
    .S_AXI_ACP_ARPROT(3'B0),
    .S_AXI_ACP_AWID(3'B0),
    .S_AXI_ACP_AWPROT(3'B0),
    .S_AXI_ACP_WID(3'B0),
    .S_AXI_ACP_ARADDR(32'B0),
    .S_AXI_ACP_AWADDR(32'B0),
    .S_AXI_ACP_ARCACHE(4'B0),
    .S_AXI_ACP_ARLEN(4'B0),
    .S_AXI_ACP_ARQOS(4'B0),
    .S_AXI_ACP_AWCACHE(4'B0),
    .S_AXI_ACP_AWLEN(4'B0),
    .S_AXI_ACP_AWQOS(4'B0),
    .S_AXI_ACP_ARBURST(2'B0),
    .S_AXI_ACP_ARLOCK(2'B0),
    .S_AXI_ACP_ARSIZE(3'B0),
    .S_AXI_ACP_AWBURST(2'B0),
    .S_AXI_ACP_AWLOCK(2'B0),
    .S_AXI_ACP_AWSIZE(3'B0),
    .S_AXI_ACP_ARUSER(5'B0),
    .S_AXI_ACP_AWUSER(5'B0),
    .S_AXI_ACP_WDATA(64'B0),
    .S_AXI_ACP_WSTRB(8'B0),
<: }  :>
<: if { $s_axi_hp0 == 1} {   :>
    .S_AXI_HP0_ARREADY(S_AXI_HP0_ARREADY),
    .S_AXI_HP0_AWREADY(S_AXI_HP0_AWREADY),
    .S_AXI_HP0_BVALID(S_AXI_HP0_BVALID),
    .S_AXI_HP0_RLAST(S_AXI_HP0_RLAST),
    .S_AXI_HP0_RVALID(S_AXI_HP0_RVALID),
    .S_AXI_HP0_WREADY(S_AXI_HP0_WREADY),
    .S_AXI_HP0_BRESP(S_AXI_HP0_BRESP),
    .S_AXI_HP0_RRESP(S_AXI_HP0_RRESP),
    .S_AXI_HP0_BID(S_AXI_HP0_BID),
    .S_AXI_HP0_RID(S_AXI_HP0_RID),
    .S_AXI_HP0_RDATA(S_AXI_HP0_RDATA),
    .S_AXI_HP0_ACLK(S_AXI_HP0_ACLK),
    .S_AXI_HP0_ARVALID(S_AXI_HP0_ARVALID),
    .S_AXI_HP0_AWVALID(S_AXI_HP0_AWVALID),
    .S_AXI_HP0_BREADY(S_AXI_HP0_BREADY),
    .S_AXI_HP0_RREADY(S_AXI_HP0_RREADY),
    .S_AXI_HP0_WLAST(S_AXI_HP0_WLAST),
    .S_AXI_HP0_WVALID(S_AXI_HP0_WVALID),
    .S_AXI_HP0_ARBURST(S_AXI_HP0_ARBURST),
    .S_AXI_HP0_ARLOCK(S_AXI_HP0_ARLOCK),
    .S_AXI_HP0_ARSIZE(S_AXI_HP0_ARSIZE),
    .S_AXI_HP0_AWBURST(S_AXI_HP0_AWBURST),
    .S_AXI_HP0_AWLOCK(S_AXI_HP0_AWLOCK),
    .S_AXI_HP0_AWSIZE(S_AXI_HP0_AWSIZE),
    .S_AXI_HP0_ARPROT(S_AXI_HP0_ARPROT),
    .S_AXI_HP0_AWPROT(S_AXI_HP0_AWPROT),
    .S_AXI_HP0_ARADDR(S_AXI_HP0_ARADDR),
    .S_AXI_HP0_AWADDR(S_AXI_HP0_AWADDR),
    .S_AXI_HP0_ARCACHE(S_AXI_HP0_ARCACHE),
    .S_AXI_HP0_ARLEN(S_AXI_HP0_ARLEN),
    .S_AXI_HP0_ARQOS(S_AXI_HP0_ARQOS),
    .S_AXI_HP0_AWCACHE(S_AXI_HP0_AWCACHE),
    .S_AXI_HP0_AWLEN(S_AXI_HP0_AWLEN),
    .S_AXI_HP0_AWQOS(S_AXI_HP0_AWQOS),
    .S_AXI_HP0_ARID(S_AXI_HP0_ARID),
    .S_AXI_HP0_AWID(S_AXI_HP0_AWID),
    .S_AXI_HP0_WID(S_AXI_HP0_WID),
    .S_AXI_HP0_WDATA(S_AXI_HP0_WDATA),
    .S_AXI_HP0_WSTRB(S_AXI_HP0_WSTRB),
<: }  :>
<: if { $s_axi_hp0 == 0} {   :>
    .S_AXI_HP0_ARREADY(),
    .S_AXI_HP0_AWREADY(),
    .S_AXI_HP0_BVALID(),
    .S_AXI_HP0_RLAST(),
    .S_AXI_HP0_RVALID(),
    .S_AXI_HP0_WREADY(),
    .S_AXI_HP0_BRESP(),
    .S_AXI_HP0_RRESP(),
    .S_AXI_HP0_BID(),
    .S_AXI_HP0_RID(),
    .S_AXI_HP0_RDATA(),
    .S_AXI_HP0_ACLK(1'B0),
    .S_AXI_HP0_ARVALID(1'B0),
    .S_AXI_HP0_AWVALID(1'B0),
    .S_AXI_HP0_BREADY(1'B0),
    .S_AXI_HP0_RREADY(1'B0),
    .S_AXI_HP0_WLAST(1'B0),
    .S_AXI_HP0_WVALID(1'B0),
    .S_AXI_HP0_ARBURST(2'B0),
    .S_AXI_HP0_ARLOCK(2'B0),
    .S_AXI_HP0_ARSIZE(3'B0),
    .S_AXI_HP0_AWBURST(2'B0),
    .S_AXI_HP0_AWLOCK(2'B0),
    .S_AXI_HP0_AWSIZE(3'B0),
    .S_AXI_HP0_ARPROT(3'B0),
    .S_AXI_HP0_AWPROT(3'B0),
    .S_AXI_HP0_ARADDR(32'B0),
    .S_AXI_HP0_AWADDR(32'B0),
    .S_AXI_HP0_ARCACHE(4'B0),
    .S_AXI_HP0_ARLEN(4'B0),
    .S_AXI_HP0_ARQOS(4'B0),
    .S_AXI_HP0_AWCACHE(4'B0),
    .S_AXI_HP0_AWLEN(4'B0),
    .S_AXI_HP0_AWQOS(4'B0),
    .S_AXI_HP0_ARID(6'B0),
    .S_AXI_HP0_AWID(6'B0),
    .S_AXI_HP0_WID(6'B0),
    .S_AXI_HP0_WDATA(<=: hp0_data_width:>'B0),
    .S_AXI_HP0_WSTRB(<=:[expr $hp0_data_width/8]:>'B0),
<: }  :>
<: if { $s_axi_hp1 == 1} {   :>
    .S_AXI_HP1_ARREADY(S_AXI_HP1_ARREADY),
    .S_AXI_HP1_AWREADY(S_AXI_HP1_AWREADY),
    .S_AXI_HP1_BVALID(S_AXI_HP1_BVALID),
    .S_AXI_HP1_RLAST(S_AXI_HP1_RLAST),
    .S_AXI_HP1_RVALID(S_AXI_HP1_RVALID),
    .S_AXI_HP1_WREADY(S_AXI_HP1_WREADY),
    .S_AXI_HP1_BRESP(S_AXI_HP1_BRESP),
    .S_AXI_HP1_RRESP(S_AXI_HP1_RRESP),
    .S_AXI_HP1_BID(S_AXI_HP1_BID),
    .S_AXI_HP1_RID(S_AXI_HP1_RID),
    .S_AXI_HP1_RDATA(S_AXI_HP1_RDATA),
    .S_AXI_HP1_ACLK(S_AXI_HP1_ACLK),
    .S_AXI_HP1_ARVALID(S_AXI_HP1_ARVALID),
    .S_AXI_HP1_AWVALID(S_AXI_HP1_AWVALID),
    .S_AXI_HP1_BREADY(S_AXI_HP1_BREADY),
    .S_AXI_HP1_RREADY(S_AXI_HP1_RREADY),
    .S_AXI_HP1_WLAST(S_AXI_HP1_WLAST),
    .S_AXI_HP1_WVALID(S_AXI_HP1_WVALID),
    .S_AXI_HP1_ARBURST(S_AXI_HP1_ARBURST),
    .S_AXI_HP1_ARLOCK(S_AXI_HP1_ARLOCK),
    .S_AXI_HP1_ARSIZE(S_AXI_HP1_ARSIZE),
    .S_AXI_HP1_AWBURST(S_AXI_HP1_AWBURST),
    .S_AXI_HP1_AWLOCK(S_AXI_HP1_AWLOCK),
    .S_AXI_HP1_AWSIZE(S_AXI_HP1_AWSIZE),
    .S_AXI_HP1_ARPROT(S_AXI_HP1_ARPROT),
    .S_AXI_HP1_AWPROT(S_AXI_HP1_AWPROT),
    .S_AXI_HP1_ARADDR(S_AXI_HP1_ARADDR),
    .S_AXI_HP1_AWADDR(S_AXI_HP1_AWADDR),
    .S_AXI_HP1_ARCACHE(S_AXI_HP1_ARCACHE),
    .S_AXI_HP1_ARLEN(S_AXI_HP1_ARLEN),
    .S_AXI_HP1_ARQOS(S_AXI_HP1_ARQOS),
    .S_AXI_HP1_AWCACHE(S_AXI_HP1_AWCACHE),
    .S_AXI_HP1_AWLEN(S_AXI_HP1_AWLEN),
    .S_AXI_HP1_AWQOS(S_AXI_HP1_AWQOS),
    .S_AXI_HP1_ARID(S_AXI_HP1_ARID),
    .S_AXI_HP1_AWID(S_AXI_HP1_AWID),
    .S_AXI_HP1_WID(S_AXI_HP1_WID),
    .S_AXI_HP1_WDATA(S_AXI_HP1_WDATA),
    .S_AXI_HP1_WSTRB(S_AXI_HP1_WSTRB),
<: }  :>
<: if { $s_axi_hp1 == 0} {   :>
    .S_AXI_HP1_ARREADY(),
    .S_AXI_HP1_AWREADY(),
    .S_AXI_HP1_BVALID(),
    .S_AXI_HP1_RLAST(),
    .S_AXI_HP1_RVALID(),
    .S_AXI_HP1_WREADY(),
    .S_AXI_HP1_BRESP(),
    .S_AXI_HP1_RRESP(),
    .S_AXI_HP1_BID(),
    .S_AXI_HP1_RID(),
    .S_AXI_HP1_RDATA(),
    .S_AXI_HP1_ACLK(1'B0),
    .S_AXI_HP1_ARVALID(1'B0),
    .S_AXI_HP1_AWVALID(1'B0),
    .S_AXI_HP1_BREADY(1'B0),
    .S_AXI_HP1_RREADY(1'B0),
    .S_AXI_HP1_WLAST(1'B0),
    .S_AXI_HP1_WVALID(1'B0),
    .S_AXI_HP1_ARBURST(2'B0),
    .S_AXI_HP1_ARLOCK(2'B0),
    .S_AXI_HP1_ARSIZE(3'B0),
    .S_AXI_HP1_AWBURST(2'B0),
    .S_AXI_HP1_AWLOCK(2'B0),
    .S_AXI_HP1_AWSIZE(3'B0),
    .S_AXI_HP1_ARPROT(3'B0),
    .S_AXI_HP1_AWPROT(3'B0),
    .S_AXI_HP1_ARADDR(32'B0),
    .S_AXI_HP1_AWADDR(32'B0),
    .S_AXI_HP1_ARCACHE(4'B0),
    .S_AXI_HP1_ARLEN(4'B0),
    .S_AXI_HP1_ARQOS(4'B0),
    .S_AXI_HP1_AWCACHE(4'B0),
    .S_AXI_HP1_AWLEN(4'B0),
    .S_AXI_HP1_AWQOS(4'B0),
    .S_AXI_HP1_ARID(6'B0),
    .S_AXI_HP1_AWID(6'B0),
    .S_AXI_HP1_WID(6'B0),
    .S_AXI_HP1_WDATA(<=: hp1_data_width:>'B0),
    .S_AXI_HP1_WSTRB(<=:[expr $hp1_data_width/8]:>'B0),
<: }  :>
<: if { $s_axi_hp2 == 1} {   :>
    .S_AXI_HP2_ARREADY(S_AXI_HP2_ARREADY),
    .S_AXI_HP2_AWREADY(S_AXI_HP2_AWREADY),
    .S_AXI_HP2_BVALID(S_AXI_HP2_BVALID),
    .S_AXI_HP2_RLAST(S_AXI_HP2_RLAST),
    .S_AXI_HP2_RVALID(S_AXI_HP2_RVALID),
    .S_AXI_HP2_WREADY(S_AXI_HP2_WREADY),
    .S_AXI_HP2_BRESP(S_AXI_HP2_BRESP),
    .S_AXI_HP2_RRESP(S_AXI_HP2_RRESP),
    .S_AXI_HP2_BID(S_AXI_HP2_BID),
    .S_AXI_HP2_RID(S_AXI_HP2_RID),
    .S_AXI_HP2_RDATA(S_AXI_HP2_RDATA),
    .S_AXI_HP2_ACLK(S_AXI_HP2_ACLK),
    .S_AXI_HP2_ARVALID(S_AXI_HP2_ARVALID),
    .S_AXI_HP2_AWVALID(S_AXI_HP2_AWVALID),
    .S_AXI_HP2_BREADY(S_AXI_HP2_BREADY),
    .S_AXI_HP2_RREADY(S_AXI_HP2_RREADY),
    .S_AXI_HP2_WLAST(S_AXI_HP2_WLAST),
    .S_AXI_HP2_WVALID(S_AXI_HP2_WVALID),
    .S_AXI_HP2_ARBURST(S_AXI_HP2_ARBURST),
    .S_AXI_HP2_ARLOCK(S_AXI_HP2_ARLOCK),
    .S_AXI_HP2_ARSIZE(S_AXI_HP2_ARSIZE),
    .S_AXI_HP2_AWBURST(S_AXI_HP2_AWBURST),
    .S_AXI_HP2_AWLOCK(S_AXI_HP2_AWLOCK),
    .S_AXI_HP2_AWSIZE(S_AXI_HP2_AWSIZE),
    .S_AXI_HP2_ARPROT(S_AXI_HP2_ARPROT),
    .S_AXI_HP2_AWPROT(S_AXI_HP2_AWPROT),
    .S_AXI_HP2_ARADDR(S_AXI_HP2_ARADDR),
    .S_AXI_HP2_AWADDR(S_AXI_HP2_AWADDR),
    .S_AXI_HP2_ARCACHE(S_AXI_HP2_ARCACHE),
    .S_AXI_HP2_ARLEN(S_AXI_HP2_ARLEN),
    .S_AXI_HP2_ARQOS(S_AXI_HP2_ARQOS),
    .S_AXI_HP2_AWCACHE(S_AXI_HP2_AWCACHE),
    .S_AXI_HP2_AWLEN(S_AXI_HP2_AWLEN),
    .S_AXI_HP2_AWQOS(S_AXI_HP2_AWQOS),
    .S_AXI_HP2_ARID(S_AXI_HP2_ARID),
    .S_AXI_HP2_AWID(S_AXI_HP2_AWID),
    .S_AXI_HP2_WID(S_AXI_HP2_WID),
    .S_AXI_HP2_WDATA(S_AXI_HP2_WDATA),
    .S_AXI_HP2_WSTRB(S_AXI_HP2_WSTRB),
<: }  :>
<: if { $s_axi_hp2 == 0} {   :>
    .S_AXI_HP2_ARREADY(),
    .S_AXI_HP2_AWREADY(),
    .S_AXI_HP2_BVALID(),
    .S_AXI_HP2_RLAST(),
    .S_AXI_HP2_RVALID(),
    .S_AXI_HP2_WREADY(),
    .S_AXI_HP2_BRESP(),
    .S_AXI_HP2_RRESP(),
    .S_AXI_HP2_BID(),
    .S_AXI_HP2_RID(),
    .S_AXI_HP2_RDATA(),
    .S_AXI_HP2_ACLK(1'B0),
    .S_AXI_HP2_ARVALID(1'B0),
    .S_AXI_HP2_AWVALID(1'B0),
    .S_AXI_HP2_BREADY(1'B0),
    .S_AXI_HP2_RREADY(1'B0),
    .S_AXI_HP2_WLAST(1'B0),
    .S_AXI_HP2_WVALID(1'B0),
    .S_AXI_HP2_ARBURST(2'B0),
    .S_AXI_HP2_ARLOCK(2'B0),
    .S_AXI_HP2_ARSIZE(3'B0),
    .S_AXI_HP2_AWBURST(2'B0),
    .S_AXI_HP2_AWLOCK(2'B0),
    .S_AXI_HP2_AWSIZE(3'B0),
    .S_AXI_HP2_ARPROT(3'B0),
    .S_AXI_HP2_AWPROT(3'B0),
    .S_AXI_HP2_ARADDR(32'B0),
    .S_AXI_HP2_AWADDR(32'B0),
    .S_AXI_HP2_ARCACHE(4'B0),
    .S_AXI_HP2_ARLEN(4'B0),
    .S_AXI_HP2_ARQOS(4'B0),
    .S_AXI_HP2_AWCACHE(4'B0),
    .S_AXI_HP2_AWLEN(4'B0),
    .S_AXI_HP2_AWQOS(4'B0),
    .S_AXI_HP2_ARID(6'B0),
    .S_AXI_HP2_AWID(6'B0),
    .S_AXI_HP2_WID(6'B0),
    .S_AXI_HP2_WDATA(<=: hp2_data_width:>'B0),
    .S_AXI_HP2_WSTRB(<=:[expr $hp2_data_width/8]:>'B0),
<: }  :>
<: if { $s_axi_hp3 == 1} {   :>
    .S_AXI_HP3_ARREADY(S_AXI_HP3_ARREADY),
    .S_AXI_HP3_AWREADY(S_AXI_HP3_AWREADY),
    .S_AXI_HP3_BVALID(S_AXI_HP3_BVALID),
    .S_AXI_HP3_RLAST(S_AXI_HP3_RLAST),
    .S_AXI_HP3_RVALID(S_AXI_HP3_RVALID),
    .S_AXI_HP3_WREADY(S_AXI_HP3_WREADY),
    .S_AXI_HP3_BRESP(S_AXI_HP3_BRESP),
    .S_AXI_HP3_RRESP(S_AXI_HP3_RRESP),
    .S_AXI_HP3_BID(S_AXI_HP3_BID),
    .S_AXI_HP3_RID(S_AXI_HP3_RID),
    .S_AXI_HP3_RDATA(S_AXI_HP3_RDATA),
    .S_AXI_HP3_ACLK(S_AXI_HP3_ACLK),
    .S_AXI_HP3_ARVALID(S_AXI_HP3_ARVALID),
    .S_AXI_HP3_AWVALID(S_AXI_HP3_AWVALID),
    .S_AXI_HP3_BREADY(S_AXI_HP3_BREADY),
    .S_AXI_HP3_RREADY(S_AXI_HP3_RREADY),
    .S_AXI_HP3_WLAST(S_AXI_HP3_WLAST),
    .S_AXI_HP3_WVALID(S_AXI_HP3_WVALID),
    .S_AXI_HP3_ARBURST(S_AXI_HP3_ARBURST),
    .S_AXI_HP3_ARLOCK(S_AXI_HP3_ARLOCK),
    .S_AXI_HP3_ARSIZE(S_AXI_HP3_ARSIZE),
    .S_AXI_HP3_AWBURST(S_AXI_HP3_AWBURST),
    .S_AXI_HP3_AWLOCK(S_AXI_HP3_AWLOCK),
    .S_AXI_HP3_AWSIZE(S_AXI_HP3_AWSIZE),
    .S_AXI_HP3_ARPROT(S_AXI_HP3_ARPROT),
    .S_AXI_HP3_AWPROT(S_AXI_HP3_AWPROT),
    .S_AXI_HP3_ARADDR(S_AXI_HP3_ARADDR),
    .S_AXI_HP3_AWADDR(S_AXI_HP3_AWADDR),
    .S_AXI_HP3_ARCACHE(S_AXI_HP3_ARCACHE),
    .S_AXI_HP3_ARLEN(S_AXI_HP3_ARLEN),
    .S_AXI_HP3_ARQOS(S_AXI_HP3_ARQOS),
    .S_AXI_HP3_AWCACHE(S_AXI_HP3_AWCACHE),
    .S_AXI_HP3_AWLEN(S_AXI_HP3_AWLEN),
    .S_AXI_HP3_AWQOS(S_AXI_HP3_AWQOS),
    .S_AXI_HP3_ARID(S_AXI_HP3_ARID),
    .S_AXI_HP3_AWID(S_AXI_HP3_AWID),
    .S_AXI_HP3_WID(S_AXI_HP3_WID),
    .S_AXI_HP3_WDATA(S_AXI_HP3_WDATA),
    .S_AXI_HP3_WSTRB(S_AXI_HP3_WSTRB),
<: }  :>
<: if { $s_axi_hp3 == 0} {   :>
    .S_AXI_HP3_ARREADY(),
    .S_AXI_HP3_AWREADY(),
    .S_AXI_HP3_BVALID(),
    .S_AXI_HP3_RLAST(),
    .S_AXI_HP3_RVALID(),
    .S_AXI_HP3_WREADY(),
    .S_AXI_HP3_BRESP(),
    .S_AXI_HP3_RRESP(),
    .S_AXI_HP3_BID(),
    .S_AXI_HP3_RID(),
    .S_AXI_HP3_RDATA(),
    .S_AXI_HP3_ACLK(1'B0),
    .S_AXI_HP3_ARVALID(1'B0),
    .S_AXI_HP3_AWVALID(1'B0),
    .S_AXI_HP3_BREADY(1'B0),
    .S_AXI_HP3_RREADY(1'B0),
    .S_AXI_HP3_WLAST(1'B0),
    .S_AXI_HP3_WVALID(1'B0),
    .S_AXI_HP3_ARBURST(2'B0),
    .S_AXI_HP3_ARLOCK(2'B0),
    .S_AXI_HP3_ARSIZE(3'B0),
    .S_AXI_HP3_AWBURST(2'B0),
    .S_AXI_HP3_AWLOCK(2'B0),
    .S_AXI_HP3_AWSIZE(3'B0),
    .S_AXI_HP3_ARPROT(3'B0),
    .S_AXI_HP3_AWPROT(3'B0),
    .S_AXI_HP3_ARADDR(32'B0),
    .S_AXI_HP3_AWADDR(32'B0),
    .S_AXI_HP3_ARCACHE(4'B0),
    .S_AXI_HP3_ARLEN(4'B0),
    .S_AXI_HP3_ARQOS(4'B0),
    .S_AXI_HP3_AWCACHE(4'B0),
    .S_AXI_HP3_AWLEN(4'B0),
    .S_AXI_HP3_AWQOS(4'B0),
    .S_AXI_HP3_ARID(6'B0),
    .S_AXI_HP3_AWID(6'B0),
    .S_AXI_HP3_WID(6'B0),
    .S_AXI_HP3_WDATA(<=: hp3_data_width:>'B0),
    .S_AXI_HP3_WSTRB(<=:[expr $hp3_data_width/8]:>'B0),
<: }  :>
<: if { $fclk0 == 1} {   :>
    .FCLK_CLK0(FCLK_CLK0),
<: }  :>
<: if { $fclk0 == 0} {   :>
    .FCLK_CLK0(),
<: }  :>	
<: if { $fclk1 == 1} {   :>
    .FCLK_CLK1(FCLK_CLK1),
<: }  :>
<: if { $fclk1 == 0} {   :>
    .FCLK_CLK1(),
<: }  :>	
<: if { $fclk2 == 1} {   :>
    .FCLK_CLK2(FCLK_CLK2),
<: }  :>
<: if { $fclk2 == 0} {   :>
    .FCLK_CLK2(),
<: }  :>	
<: if { $fclk3 == 1} {   :>
    .FCLK_CLK3(FCLK_CLK3),
<: }  :>
<: if { $fclk3 == 0} {   :>
    .FCLK_CLK3(),
<: }  :>
<: if { $rst0 == 1} {   :>
    .FCLK_RESET0_N(FCLK_RESET0_N),
<: }  :>
<: if { $rst0 == 0} {   :>
    .FCLK_RESET0_N(),
<: }  :>
<: if { $rst1 == 1} {   :>
    .FCLK_RESET1_N(FCLK_RESET1_N),
<: }  :>
<: if { $rst1 == 0} {   :>
    .FCLK_RESET1_N(),
<: }  :>
<: if { $rst2 == 1} {   :>
    .FCLK_RESET2_N(FCLK_RESET2_N),
<: }  :>
<: if { $rst2 == 0} {   :>
    .FCLK_RESET2_N(),
<: }  :>
<: if { $rst3 == 1} {   :>
    .FCLK_RESET3_N(FCLK_RESET3_N),
<: }  :>
<: if { $rst3 == 0} {   :>
    .FCLK_RESET3_N(),
<: }  :>
<: if { $irqf2p_en == 1} {   :>
    .IRQ_F2P(IRQ_F2P),
<: }  :>
<: if { $irqf2p_en == 0} {   :>
    .IRQ_F2P(16'B0),
<: }  :>
    .PS_SRSTB(PS_SRSTB),
    .PS_CLK(PS_CLK),
    .PS_PORB(PS_PORB)
  );
endmodule
<: } :>
