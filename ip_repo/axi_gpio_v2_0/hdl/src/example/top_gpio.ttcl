<: ;#Component and file information :>
<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory [ttcl_string_concat $ComponentName "/example_design"] :>
<: setFileName [ttcl_string_concat $ComponentName "_exdes"] :>
<: set c_family [getProjectFamily] :>
<: set all_inputs [getIntValue "C_ALL_INPUTS"] :>
<: set all_inputs_2 [getIntValue "C_ALL_INPUTS_2"] :>
<: set all_outputs [getIntValue "C_ALL_OUTPUTS"] :>
<: set all_outputs_2 [getIntValue "C_ALL_OUTPUTS_2"] :>
<: set is_dual [getIntValue "C_IS_DUAL"] :>
<: set intrp [getIntValue "C_INTERRUPT_PRESENT"] :>
<: set gpio_width [getIntValue "C_GPIO_WIDTH"] :>
<: set gpio_width2 [getIntValue "C_GPIO2_WIDTH"] :>
<: set is_blankout 1 :>
<: set wd [ file dirname [ get_property xml_file_name [ current_ipbom ] ] ] :>
<: setFileExtension ".vhd" :>
-- (c) Copyright 2009 - 2013 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_misc.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;


library unisim;
use unisim.vcomponents.all;
library work;

entity <=: $ComponentName :>_exdes is
--   generic (
--        USE_ATG : integer range 0 to 1 := 0
--   );
   port (
         clk_in1_p : in std_logic;
         clk_in1_n : in std_logic;
         reset : in std_logic;
         start : in std_logic;
<: if {$all_inputs} { :>
         gpio_input : in std_logic_vector(<=:$gpio_width :> -1 downto 0);
<: } elseif {$all_outputs} { :>
         gpio_output : out std_logic_vector(<=:$gpio_width :> -1 downto 0);
<: } else { :>
         gpio_input : in std_logic_vector(<=:$gpio_width :> -1 downto 0);
         gpio_output : out std_logic_vector(<=:$gpio_width :> -1 downto 0);
<: } :>
	 
<: if {$is_dual} { :>
<: if {$all_inputs_2} { :>
         gpio_input2 : in std_logic_vector(<=:$gpio_width2 :> -1 downto 0);
<: } elseif {$all_outputs_2} { :>
         gpio_output2 : out std_logic_vector(<=:$gpio_width2 :> -1 downto 0);
<: } else { :>
         gpio_input2 : in std_logic_vector(<=:$gpio_width2 :> -1 downto 0);
         gpio_output2 : out std_logic_vector(<=:$gpio_width2 :> -1 downto 0);
<: } :>
<: } :>
         glow_led          : out  std_logic);



end entity;

architecture impl of <=: $ComponentName :>_exdes is

attribute DowngradeIPIdentifiedWarnings: string;
attribute DowngradeIPIdentifiedWarnings of impl : architecture is "yes";

component clock_gen is
     port (
           clk_in1_p : in std_logic;
           clk_in1_n : in std_logic;
           reset    : in std_logic;
           locked   : out std_logic;
           clock_lite : out std_logic
          );

end component;

COMPONENT <=:$ComponentName:>
  PORT (
<: if {$intrp} {  :> 
    ip2intc_irpt  : out std_logic;         
<: } :>

<: if {$all_inputs} { :>
    gpio_io_i  : in  std_logic_vector(<=:$gpio_width :> -1 downto 0);   
<: } elseif {$all_outputs} { :>
    gpio_io_o     : out std_logic_vector(<=:$gpio_width :> -1 downto 0);     
<: } else { :>
    gpio_io_o      : out std_logic_vector(<=:$gpio_width :> -1 downto 0);
    gpio_io_t       : out std_logic_vector(<=:$gpio_width :> -1 downto 0); 
    gpio_io_i       : in  std_logic_vector(<=:$gpio_width :> -1 downto 0);    
<: } :>

    -- GPIO Signals------------------------------------------------------------
<: if {$is_dual} { :>
<: if {$all_inputs_2} { :>
    gpio2_io_i       : in  std_logic_vector(<=:$gpio_width2 :> -1 downto 0);   
<: } elseif {$all_outputs_2} { :>
    gpio2_io_o       : out std_logic_vector(<=:$gpio_width2 :> -1 downto 0);        
<: } else { :>
    gpio2_io_o        : out std_logic_vector(<=:$gpio_width2 :> -1 downto 0);      
    gpio2_io_t        : out std_logic_vector(<=:$gpio_width2 :> -1 downto 0);    
    gpio2_io_i        : in  std_logic_vector(<=:$gpio_width2 :> -1 downto 0);  
<: } :>
<: } :>

    s_axi_aclk  : in  std_logic;
    s_axi_aresetn  : in  std_logic;
    s_axi_awaddr    : in  std_logic_vector(8 downto 0); 
    s_axi_awvalid    : in  std_logic;   				
    s_axi_awready     : out std_logic;
    s_axi_wdata      : in  std_logic_vector(31 downto 0);  
    s_axi_wstrb       : in  std_logic_vector(3 downto 0);   				
    s_axi_wvalid     : in  std_logic;    				
    s_axi_wready     : out std_logic;
    s_axi_bresp      : out std_logic_vector(1 downto 0);
    s_axi_bvalid     : out std_logic;
    s_axi_bready     : in  std_logic;
    s_axi_araddr     : in  std_logic_vector(8 downto 0);  
    s_axi_arvalid    : in  std_logic;   				
    s_axi_arready    : out std_logic;
    s_axi_rdata      : out std_logic_vector(31 downto 0);  
    s_axi_rresp      : out std_logic_vector(1 downto 0);   				
    s_axi_rvalid     : out std_logic;
    s_axi_rready     : in  std_logic
    );
END COMPONENT;


component axi_traffic_gen_0 is 
  port (
  s_axi_aclk : in std_logic;
  s_axi_aresetn : in std_logic;
  m_axi_lite_ch1_awaddr : out std_logic_vector (31 downto 0);
  m_axi_lite_ch1_awprot : out std_logic_vector (2 downto 0);
  m_axi_lite_ch1_awvalid : out std_logic;
  m_axi_lite_ch1_awready : in std_logic;
  m_axi_lite_ch1_wdata : out std_logic_vector (31 downto 0);
  m_axi_lite_ch1_wstrb : out std_logic_vector (3 downto 0);
  m_axi_lite_ch1_wvalid : out std_logic;
  m_axi_lite_ch1_wready : in std_logic;
  m_axi_lite_ch1_bresp : in std_logic_vector (1 downto 0);
  m_axi_lite_ch1_bvalid : in std_logic;
  m_axi_lite_ch1_bready : out std_logic;
  m_axi_lite_ch1_araddr : out std_logic_vector (31 downto 0);
  m_axi_lite_ch1_arvalid : out std_logic;
  m_axi_lite_ch1_arready : in std_logic;
  m_axi_lite_ch1_rdata : in std_logic_vector (31 downto 0);
  m_axi_lite_ch1_rvalid : in std_logic;
  m_axi_lite_ch1_rready : out std_logic;
  m_axi_lite_ch1_rresp : in std_logic_vector (1 downto 0);
  done : out std_logic;
  status : out std_logic_vector (31 downto 0)
);
end component;



constant C_GPIO_WIDTH : integer := <=:$gpio_width :>;
constant C_GPIO2_WIDTH : integer := <=:$gpio_width2 :>;

signal    m_axi_lite_awready          :  std_logic                         ;-- AXI4-Lite
signal    m_axi_lite_awvalid          :  std_logic                         ;-- AXI4-Lite
signal    m_axi_lite_awaddr           :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    m_axi_lite_wready           :  std_logic                         ;-- AXI4-Lite
signal    m_axi_lite_wvalid           :  std_logic                         ;-- AXI4-Lite
signal    m_axi_lite_wdata            :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    m_axi_lite_bready           :  std_logic                         ;-- AXI4-Lite
signal    m_axi_lite_bvalid           :  std_logic                         ;-- AXI4-Lite
signal    m_axi_lite_bresp            :  std_logic_vector(1 downto 0)      ;-- AXI4-Lite
signal    s_axi_lite_arready          :  std_logic                         ;-- AXI4-Lite
signal    s_axi_lite_arvalid          :  std_logic                         ;-- AXI4-Lite
signal    s_axi_lite_araddr           :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    s_axi_lite_rready           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_lite_rvalid           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_lite_rdata            :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    s_axi_lite_rresp            :  std_logic_vector(1 downto 0)      ;-- AXI4-Lite

  signal clock_lite : std_logic;
  signal locked : std_logic;
  signal reset_lock : std_logic;
 signal s_axi_aclk   : std_logic;      
 signal s_axi_aresetn: std_logic;      
 signal irq_out : std_logic;
signal done : std_logic;
signal status : std_logic_vector (31 downto 0);

---
signal awlen : std_logic_vector (7 downto 0);
signal awvalid : std_logic;
signal init_done : std_logic; 
signal counter : std_logic_vector (7 downto 0);
signal wvalid : std_logic;
---

signal pass : std_logic;
signal fail : std_logic;
signal cdma_intr : std_logic;
signal done_int : std_logic;
signal gpio_io_sig   :  std_logic_vector(C_GPIO_WIDTH-1 downto 0);
signal gpio_io_sig2   :  std_logic_vector(C_GPIO2_WIDTH-1 downto 0);


begin

CLOCK_GEN_INST : clock_gen 
         port map (
           clk_in1_p => clk_in1_p ,
           clk_in1_n => clk_in1_n ,
           reset    => reset,
           locked   => locked,  
           clock_lite => clock_lite);      

reset_lock <= locked;



ATG1:  axi_traffic_gen_0 
   port map (
    s_axi_aclk         => clock_lite,
    s_axi_aresetn      => reset_lock,
    m_axi_lite_ch1_awaddr   => m_axi_lite_awaddr,
    m_axi_lite_ch1_awprot   => open,
    m_axi_lite_ch1_awvalid  => m_axi_lite_awvalid,
    m_axi_lite_ch1_awready  => m_axi_lite_awready,
    m_axi_lite_ch1_wdata    => m_axi_lite_wdata,
    m_axi_lite_ch1_wstrb    => open,
    m_axi_lite_ch1_wvalid   => m_axi_lite_wvalid,
    m_axi_lite_ch1_wready   => m_axi_lite_wready,
    m_axi_lite_ch1_bresp    => m_axi_lite_bresp,
    m_axi_lite_ch1_bvalid   => m_axi_lite_bvalid,
    m_axi_lite_ch1_bready   => m_axi_lite_bready,
    m_axi_lite_ch1_araddr   => s_axi_lite_araddr,
    m_axi_lite_ch1_arvalid  => s_axi_lite_arvalid,
    m_axi_lite_ch1_arready  => s_axi_lite_arready,
    m_axi_lite_ch1_rdata    => s_axi_lite_rdata,
    m_axi_lite_ch1_rvalid   => s_axi_lite_rvalid,
    m_axi_lite_ch1_rready   => s_axi_lite_rready,
    m_axi_lite_ch1_rresp    => s_axi_lite_rresp,
    done                    => done,
    status                  => status
  );



DUT : <=: $ComponentName :>
    PORT MAP (
<: if {$intrp} {  :> 
    ip2intc_irpt  => open,         
<: } :>

<: if {$all_inputs} { :>
    gpio_io_i    => gpio_input, 
<: } elseif {$all_outputs} { :>
    gpio_io_o     => gpio_output,      
<: } else { :>
    gpio_io_o      => gpio_output,
    gpio_io_t       => open, 
    gpio_io_i        => gpio_input,
<: } :>

    -- GPIO Signals------------------------------------------------------------
<: if {$is_dual} { :>
<: if {$all_inputs_2} { :>
    gpio2_io_i        => gpio_input2,  
<: } elseif {$all_outputs_2} { :>
    gpio2_io_o       => gpio_output2,        
<: } else { :>
    gpio2_io_o        => gpio_output2,      
    gpio2_io_t         => open,    
    gpio2_io_i         => gpio_input2, 
<: } :>
<: } :>

    s_axi_aclk  => clock_lite,
    s_axi_aresetn  => reset_lock,
    s_axi_awaddr    => m_axi_lite_awaddr(8 downto 0),
    s_axi_awvalid    => m_axi_lite_awvalid,
    s_axi_awready     => m_axi_lite_awready,
    s_axi_wdata      =>  m_axi_lite_wdata,
    s_axi_wstrb      => x"f",
    s_axi_wvalid     =>   m_axi_lite_wvalid,
    s_axi_wready     =>    m_axi_lite_wready,
    s_axi_bresp      =>     m_axi_lite_bresp,
    s_axi_bvalid     =>      m_axi_lite_bvalid,
    s_axi_bready     =>       m_axi_lite_bready,
    s_axi_araddr     =>       s_axi_lite_araddr(8 downto 0),
    s_axi_arvalid    =>       s_axi_lite_arvalid,
    s_axi_arready    =>       s_axi_lite_arready,
    s_axi_rdata      =>       s_axi_lite_rdata,
    s_axi_rresp      =>       s_axi_lite_rresp,
    s_axi_rvalid     =>       s_axi_lite_rvalid,
    s_axi_rready     =>       s_axi_lite_rready
    );

glow_led <= '1' when (done = '1' and status(1 downto 0) = "01") else '0' ;

end impl;

